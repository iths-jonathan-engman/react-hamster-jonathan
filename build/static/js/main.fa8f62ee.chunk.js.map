{"version":3,"sources":["components/Start.jsx","components/Battle.jsx","components/Stats.jsx","components/Upload.jsx","App.js","serviceWorker.js","index.js"],"names":["Start","Battle","useState","hamster1","setHamster1","hamster2","setHamster2","useEffect","a","fetch","response1","json","hamster11","response2","hamster22","getHamster","Stats","stats","setStats","topHamsters","setTopHamster","botHamsters","setBottomHamster","response","data","console","log","hamTop","hamBot","getStatistics","getTopHamster","getBotHamster","map","hamster","key","id","name","wins","defeats","Upload","type","placeholder","App","className","to","activeClassName","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa8f62ee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Start = () => (\r\n    <div>\r\n        <h1> Welcome to HamsterWars! </h1>\r\n\r\n        <h2> Instructions </h2>\r\n\r\n        <p> You have finnaly arrived to the ultimate gladiatorpit, where battle-ready hamsters, not humans, fight until their victory, or demise is met. \r\n            Use the navigationtool to explore the mighty arena! \r\n        </p>\r\n\r\n        <h3> Good luck! </h3>\r\n    </div>\r\n);\r\n\r\nexport default Start;","import React, { useState, useEffect } from 'react';\r\n\r\nconst Battle = () => {\r\n    const [hamster1, setHamster1] = useState(null);\r\n    const [hamster2, setHamster2] = useState(null);\r\n    \r\n    useEffect(() => {\r\n        async function getHamster() {\r\n            \r\n            \r\n            const response1 = await fetch('/api/hamsters/random');\r\n            const hamster11 = await response1.json();\r\n\r\n            const response2 = await fetch('/api/hamsters/random');\r\n            const hamster22 = await response2.json();\r\n        \r\n            setHamster1(hamster11);\r\n            setHamster2(hamster22);\r\n\r\n        }\r\n        getHamster();\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2> Statistik </h2>\r\n            { hamster1 || hamster2 === null\r\n            ? <p> No data (yet) </p>\r\n            : (\r\n                <div>\r\n                    <p> something: { hamster1 }</p>\r\n                </div>\r\n            )\r\n            }\r\n            </div>\r\n    )};\r\n\r\n// const Battle = () => {\r\n    \r\n//     const [hamster1, setHamster1] = useState(null);\r\n//     const [hamster2, setHamster2] = useState(null);\r\n\r\n    \r\n//     useEffect(() => {\r\n        \r\n//         async function getHamster() {\r\n//             try {\r\n//                 const response1 = await fetch('/api/hamsters/random');\r\n//                 const hamster1 = await response1.json();\r\n                \r\n//                 const response2 = await fetch('/api/hamsters/random');\r\n//                 const hamster2 = await response2.json();\r\n//                 // spara datan i en eller flera state-variabler\r\n//                 // return data;\r\n//                 setHamster1(hamster1);\r\n//                 setHamster2(hamster2);\r\n//             } catch(error) {\r\n//                 // console.log information om felet\r\n//                 // hantera användarvänligt\r\n//             }\r\n//             getHamster()\r\n//         }\r\n//     }, []);\r\n//     // för att hämta data använder vi till exempel FETCH\r\n    \r\n//     return (\r\n//         <div>\r\n//         <p> Welcome to Hamsterwars! </p>\r\n//         <button> OoF </button>\r\n//     </div>\r\n// )};\r\n\r\nexport default Battle;","import React, { useState, useEffect } from 'react';\r\n\r\nconst Stats = () => {\r\n    const [stats, setStats] = useState(null);\r\n    const [topHamsters, setTopHamster] = useState(null);\r\n    const [botHamsters, setBottomHamster] = useState(null);\r\n    \r\n    useEffect(() => {\r\n        async function getStatistics() {\r\n            const response = await fetch('/api/stats');\r\n            const data = await response.json();\r\n            // data should contain { total }\r\n            setStats(data.stats);\r\n            console.log(data)\r\n        }\r\n        getStatistics();\r\n\r\n        async function getTopHamster() {\r\n            const response = await fetch('/api/charts/top');\r\n            const hamTop = await response.json();\r\n            // data should contain { total }\r\n            setTopHamster(hamTop.topHamsters);\r\n            console.log(hamTop);\r\n        }\r\n        getTopHamster();\r\n\r\n        async function getBotHamster() {\r\n            const response = await fetch('/api/charts/bottom');\r\n            const hamBot = await response.json();\r\n            // data should contain { total }\r\n            setBottomHamster(hamBot.botHamsters);\r\n            console.log(botHamsters);\r\n        }\r\n        getBotHamster();\r\n        \r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2> Statistic </h2>\r\n            { stats === null\r\n            ? <p> No data (yet) </p>\r\n            : (\r\n                <div>\r\n                    <p> Number of games: { stats }</p>\r\n                </div>\r\n            )\r\n            }\r\n            <h1> Top hamsters! </h1>\r\n            { topHamsters === null \r\n                ? <p> No data (yet) </p> \r\n                : topHamsters.map(hamster => (\r\n                <section key={hamster.id}>\r\n\r\n                    <article>\r\n                        <h3> {hamster.name} </h3>\r\n                        <ul> Wins: {hamster.wins} </ul>\r\n                    </article>\r\n\r\n                </section>\r\n\r\n            ))}\r\n            <h1> Bottom hamsters! </h1>\r\n            { botHamsters === null\r\n                ? <p> No data (yet) </p>\r\n                : botHamsters.map(hamster => (\r\n                <section key={hamster.id}>\r\n\r\n                    <article>\r\n                        <h3> {hamster.name} </h3>\r\n                        <ul> Defeats: {hamster.defeats} </ul>\r\n                    </article>\r\n                    \r\n                </section>\r\n            ))}\r\n            </div>\r\n    )};\r\n\r\nexport default Stats;","import React from 'react';\r\n\r\nconst Upload = () => {\r\n//     const [] = useState(null);\r\n    \r\n    // useEffect(() => {\r\n    //     async function get() {\r\n    //         const response = await fetch('/api/');\r\n    //         const data = await response.json();\r\n            \r\n    //         setStats();\r\n    //         console.log()\r\n    //     }\r\n    //     get();\r\n\r\n    // }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1> Upload a hamster! </h1>\r\n\r\n            <div>\r\n                <label>\r\n                    <input type=\"text\" placeholder=\"Name: \"></input>\r\n                </label>\r\n\r\n                <label>\r\n                    <input type=\"text\" placeholder=\"Age: \"></input>\r\n                </label>\r\n\r\n                <label>\r\n                    <input type=\"text\" placeholder=\"Fav food: \"></input>\r\n                </label>\r\n                \r\n                <label>\r\n                    <input type=\"text\" placeholder=\"Loves: \"></input>\r\n                </label>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Upload;","import React, { /*useState*/ } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link, NavLink } from 'react-router-dom';\n//import { useLocation } from \"react-router-dom\";\n\nimport Start from './components/Start';\nimport Battle from './components/Battle';\nimport Stats from './components/Stats';\nimport Upload from './components/Upload';\n\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n            <header className=\"App-header\">\n                <h1> Hamsterwars </h1>\n                <nav>\n                    <Link to=\"/\"> Start </Link>\n\n                    <NavLink to=\"/battle\" activeClassName=\"active\"> Battle </NavLink>\n                    <NavLink to=\"/stats\" activeClassName=\"active\"> Stats </NavLink>\n                    <NavLink to=\"/upload\" activeClassName=\"active\"> Upload </NavLink>\n                </nav>\n            </header>\n            <main className=\"App-main\">\n            <Switch>\n\n                <Route path=\"/battle\"> <Battle /> </Route>\n                <Route path=\"/battle/:id1/:id2\"> <Battle /> </Route>\n                <Route path=\"/matchup/:id1/:id2\"> <Upload /> </Route>\n                <Route path='/stats'> <Stats /> </Route>\n                <Route path=\"/upload\"> <Upload /> </Route>\n               \n                <Route path=\"/\"> <Start /> </Route>\n            </Switch>\n            </main>\n            <footer>\n                footer\n            </footer>\n            </div>\n        </Router>\n\n    );\n}\n\n\n// async function getHamsters() {\n//     let baseUrl = '/api';\n//     try {\n//         const response = await fetch(baseUrl + '/hamsters'); // fetching /api/hamsters\n//         const hamsterArray = await response.json();\n//         return hamsterArray;\n//     } catch (e) {\n//         console.log('Fetch failed because', e);\n//         return null;\n//     }\n// }\n\n// const ScrollToTop = () => {\n// \tconst { pathname } = useLocation();\n// \tuseEffect(() => { window.scrollTo(0, 0); }, [pathname]);\n// \treturn null;\n// }\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}